version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: halo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - halo-network

  # Supabase Auth
  auth:
    image: supabase/gotrue:v2.99.0
    restart: unless-stopped
    depends_on:
      - db
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${DB_PASSWORD:-your_secure_password}@db:5432/halo_db?search_path=auth
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS:-}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_MAILER_AUTOCONFIRM: ${MAILER_AUTOCONFIRM:-false}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL:-}
      GOTRUE_SMTP_HOST: ${SMTP_HOST:-}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: ${SMTP_USER:-}
      GOTRUE_SMTP_PASS: ${SMTP_PASS:-}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME:-}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY:-/auth/v1/verify}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE:-/auth/v1/verify}
    ports:
      - "9999:9999"
    networks:
      - halo-network

  # PostgREST API
  rest:
    image: postgrest/postgrest:v11.2.0
    restart: unless-stopped
    depends_on:
      - db
    environment:
      PGRST_DB_URI: postgres://postgres:${DB_PASSWORD:-your_secure_password}@db:5432/halo_db
      PGRST_DB_SCHEMAS: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    ports:
      - "3000:3000"
    networks:
      - halo-network

  # Supabase Storage
  storage:
    image: supabase/storage-api:v0.40.4
    restart: unless-stopped
    depends_on:
      - db
      - rest
    environment:
      ANON_KEY: ${ANON_KEY:-}
      SERVICE_KEY: ${SERVICE_ROLE_KEY:-}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      DATABASE_URL: postgres://postgres:${DB_PASSWORD:-your_secure_password}@db:5432/halo_db
      STORAGE_BACKEND: file
      FILE_SIZE_LIMIT: 52428800
      STORAGE_S3_BUCKET: stub
      STORAGE_S3_REGION: stub
      STORAGE_S3_ENDPOINT: stub
      STORAGE_S3_ACCESS_KEY_ID: stub
      STORAGE_S3_SECRET_ACCESS_KEY: stub
      GLOBAL_S3_BUCKET: stub
    volumes:
      - storage_data:/var/lib/storage
    ports:
      - "5000:5000"
    networks:
      - halo-network

  # Edge Functions Runtime
  functions:
    image: supabase/edge-runtime:v1.22.4
    restart: unless-stopped
    depends_on:
      - db
    environment:
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY:-}
    volumes:
      - ./supabase/functions:/home/deno/functions:cached
    ports:
      - "9998:9998"
    networks:
      - halo-network

  # Kong API Gateway
  kong:
    image: kong:2.8.1
    restart: unless-stopped
    depends_on:
      - db
      - rest
      - auth
      - storage
      - functions
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./docker/kong.yml:/var/lib/kong/kong.yml:ro
    ports:
      - "8000:8000"
    networks:
      - halo-network

  # HALO Frontend
  frontend:
    build: .
    restart: unless-stopped
    depends_on:
      - kong
    environment:
      - VITE_SUPABASE_URL=http://localhost:8000
      - VITE_SUPABASE_ANON_KEY=${ANON_KEY:-}
    ports:
      - "80:80"
    networks:
      - halo-network

volumes:
  postgres_data:
  storage_data:

networks:
  halo-network:
    driver: bridge